import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

// TODO: Auto-generated Javadoc
/**
 * The Class IntegerConvertParseTest.
 */
@TestMethodOrder(OrderAnnotation.class)
class IntegerConvertParseTest {

	/** The data to stress test binary conversion to byte */
	private String[] binToByteData = new String[] {
			"0b10000000",
			"0b10000001",
			"0b10000010",
			"0b10000011",
			"0b10000100",
			"0b10000101",
			"0b10000110",
			"0b10000111",
			"0b10001000",
			"0b10001001",
			"0b10001010",
			"0b10001011",
			"0b10001100",
			"0b10001101",
			"0b10001110",
			"0b10001111",
			"0b10010000",
			"0b10010001",
			"0b10010010",
			"0b10010011",
			"0b10010100",
			"0b10010101",
			"0b10010110",
			"0b10010111",
			"0b10011000",
			"0b10011001",
			"0b10011010",
			"0b10011011",
			"0b10011100",
			"0b10011101",
			"0b10011110",
			"0b10011111",
			"0b10100000",
			"0b10100001",
			"0b10100010",
			"0b10100011",
			"0b10100100",
			"0b10100101",
			"0b10100110",
			"0b10100111",
			"0b10101000",
			"0b10101001",
			"0b10101010",
			"0b10101011",
			"0b10101100",
			"0b10101101",
			"0b10101110",
			"0b10101111",
			"0b10110000",
			"0b10110001",
			"0b10110010",
			"0b10110011",
			"0b10110100",
			"0b10110101",
			"0b10110110",
			"0b10110111",
			"0b10111000",
			"0b10111001",
			"0b10111010",
			"0b10111011",
			"0b10111100",
			"0b10111101",
			"0b10111110",
			"0b10111111",
			"0b11000000",
			"0b11000001",
			"0b11000010",
			"0b11000011",
			"0b11000100",
			"0b11000101",
			"0b11000110",
			"0b11000111",
			"0b11001000",
			"0b11001001",
			"0b11001010",
			"0b11001011",
			"0b11001100",
			"0b11001101",
			"0b11001110",
			"0b11001111",
			"0b11010000",
			"0b11010001",
			"0b11010010",
			"0b11010011",
			"0b11010100",
			"0b11010101",
			"0b11010110",
			"0b11010111",
			"0b11011000",
			"0b11011001",
			"0b11011010",
			"0b11011011",
			"0b11011100",
			"0b11011101",
			"0b11011110",
			"0b11011111",
			"0b11100000",
			"0b11100001",
			"0b11100010",
			"0b11100011",
			"0b11100100",
			"0b11100101",
			"0b11100110",
			"0b11100111",
			"0b11101000",
			"0b11101001",
			"0b11101010",
			"0b11101011",
			"0b11101100",
			"0b11101101",
			"0b11101110",
			"0b11101111",
			"0b11110000",
			"0b11110001",
			"0b11110010",
			"0b11110011",
			"0b11110100",
			"0b11110101",
			"0b11110110",
			"0b11110111",
			"0b11111000",
			"0b11111001",
			"0b11111010",
			"0b11111011",
			"0b11111100",
			"0b11111101",
			"0b11111110",
			"0b11111111",
			"0b00000000",
			"0b00000001",
			"0b00000010",
			"0b00000011",
			"0b00000100",
			"0b00000101",
			"0b00000110",
			"0b00000111",
			"0b00001000",
			"0b00001001",
			"0b00001010",
			"0b00001011",
			"0b00001100",
			"0b00001101",
			"0b00001110",
			"0b00001111",
			"0b00010000",
			"0b00010001",
			"0b00010010",
			"0b00010011",
			"0b00010100",
			"0b00010101",
			"0b00010110",
			"0b00010111",
			"0b00011000",
			"0b00011001",
			"0b00011010",
			"0b00011011",
			"0b00011100",
			"0b00011101",
			"0b00011110",
			"0b00011111",
			"0b00100000",
			"0b00100001",
			"0b00100010",
			"0b00100011",
			"0b00100100",
			"0b00100101",
			"0b00100110",
			"0b00100111",
			"0b00101000",
			"0b00101001",
			"0b00101010",
			"0b00101011",
			"0b00101100",
			"0b00101101",
			"0b00101110",
			"0b00101111",
			"0b00110000",
			"0b00110001",
			"0b00110010",
			"0b00110011",
			"0b00110100",
			"0b00110101",
			"0b00110110",
			"0b00110111",
			"0b00111000",
			"0b00111001",
			"0b00111010",
			"0b00111011",
			"0b00111100",
			"0b00111101",
			"0b00111110",
			"0b00111111",
			"0b01000000",
			"0b01000001",
			"0b01000010",
			"0b01000011",
			"0b01000100",
			"0b01000101",
			"0b01000110",
			"0b01000111",
			"0b01001000",
			"0b01001001",
			"0b01001010",
			"0b01001011",
			"0b01001100",
			"0b01001101",
			"0b01001110",
			"0b01001111",
			"0b01010000",
			"0b01010001",
			"0b01010010",
			"0b01010011",
			"0b01010100",
			"0b01010101",
			"0b01010110",
			"0b01010111",
			"0b01011000",
			"0b01011001",
			"0b01011010",
			"0b01011011",
			"0b01011100",
			"0b01011101",
			"0b01011110",
			"0b01011111",
			"0b01100000",
			"0b01100001",
			"0b01100010",
			"0b01100011",
			"0b01100100",
			"0b01100101",
			"0b01100110",
			"0b01100111",
			"0b01101000",
			"0b01101001",
			"0b01101010",
			"0b01101011",
			"0b01101100",
			"0b01101101",
			"0b01101110",
			"0b01101111",
			"0b01110000",
			"0b01110001",
			"0b01110010",
			"0b01110011",
			"0b01110100",
			"0b01110101",
			"0b01110110",
			"0b01110111",
			"0b01111000",
			"0b01111001",
			"0b01111010",
			"0b01111011",
			"0b01111100",
			"0b01111101",
			"0b01111110",
			"0b01111111"			
	};
	
	/** The data to stress test binary string conversion to integer */
	private String[] binToIntData = new String[] {
			"0b00000011000000100000000100000000",
			"0b00000000000000010000001000000011",
			"0b00000100000000110000001000000001",
			"0b00000001000000100000001100000100",
			"0b00000101000001000000001100000010",
			"0b00000010000000110000010000000101",
			"0b00000110000001010000010000000011",
			"0b00000011000001000000010100000110",
			"0b00000111000001100000010100000100",
			"0b00000100000001010000011000000111",
			"0b00001000000001110000011000000101",
			"0b00000101000001100000011100001000",
			"0b00001001000010000000011100000110",
			"0b00000110000001110000100000001001",
			"0b00001010000010010000100000000111",
			"0b00000111000010000000100100001010",
			"0b00001011000010100000100100001000",
			"0b00001000000010010000101000001011",
			"0b00001100000010110000101000001001",
			"0b00001001000010100000101100001100",
			"0b00001101000011000000101100001010",
			"0b00001010000010110000110000001101",
			"0b00001110000011010000110000001011",
			"0b00001011000011000000110100001110",
			"0b00001111000011100000110100001100",
			"0b00001100000011010000111000001111",
			"0b00010000000011110000111000001101",
			"0b00001101000011100000111100010000",
			"0b00010001000100000000111100001110",
			"0b00001110000011110001000000010001",
			"0b00010010000100010001000000001111",
			"0b00001111000100000001000100010010",
			"0b00010011000100100001000100010000",
			"0b00010000000100010001001000010011",
			"0b00010100000100110001001000010001",
			"0b00010001000100100001001100010100",
			"0b00010101000101000001001100010010",
			"0b00010010000100110001010000010101",
			"0b00010110000101010001010000010011",
			"0b00010011000101000001010100010110",
			"0b00010111000101100001010100010100",
			"0b00010100000101010001011000010111",
			"0b00011000000101110001011000010101",
			"0b00010101000101100001011100011000",
			"0b00011001000110000001011100010110",
			"0b00010110000101110001100000011001",
			"0b00011010000110010001100000010111",
			"0b00010111000110000001100100011010",
			"0b00011011000110100001100100011000",
			"0b00011000000110010001101000011011",
			"0b00011100000110110001101000011001",
			"0b00011001000110100001101100011100",
			"0b00011101000111000001101100011010",
			"0b00011010000110110001110000011101",
			"0b00011110000111010001110000011011",
			"0b00011011000111000001110100011110",
			"0b00011111000111100001110100011100",
			"0b00011100000111010001111000011111",
			"0b00100000000111110001111000011101",
			"0b00011101000111100001111100100000",
			"0b00100001001000000001111100011110",
			"0b00011110000111110010000000100001",
			"0b00100010001000010010000000011111",
			"0b00011111001000000010000100100010",
			"0b00100011001000100010000100100000",
			"0b00100000001000010010001000100011",
			"0b00100100001000110010001000100001",
			"0b00100001001000100010001100100100",
			"0b00100101001001000010001100100010",
			"0b00100010001000110010010000100101",
			"0b00100110001001010010010000100011",
			"0b00100011001001000010010100100110",
			"0b00100111001001100010010100100100",
			"0b00100100001001010010011000100111",
			"0b00101000001001110010011000100101",
			"0b00100101001001100010011100101000",
			"0b00101001001010000010011100100110",
			"0b00100110001001110010100000101001",
			"0b00101010001010010010100000100111",
			"0b00100111001010000010100100101010",
			"0b00101011001010100010100100101000",
			"0b00101000001010010010101000101011",
			"0b00101100001010110010101000101001",
			"0b00101001001010100010101100101100",
			"0b00101101001011000010101100101010",
			"0b00101010001010110010110000101101",
			"0b00101110001011010010110000101011",
			"0b00101011001011000010110100101110",
			"0b00101111001011100010110100101100",
			"0b00101100001011010010111000101111",
			"0b00110000001011110010111000101101",
			"0b00101101001011100010111100110000",
			"0b00110001001100000010111100101110",
			"0b00101110001011110011000000110001",
			"0b00110010001100010011000000101111",
			"0b00101111001100000011000100110010",
			"0b00110011001100100011000100110000",
			"0b00110000001100010011001000110011",
			"0b00110100001100110011001000110001",
			"0b00110001001100100011001100110100",
			"0b00110101001101000011001100110010",
			"0b00110010001100110011010000110101",
			"0b00110110001101010011010000110011",
			"0b00110011001101000011010100110110",
			"0b00110111001101100011010100110100",
			"0b00110100001101010011011000110111",
			"0b00111000001101110011011000110101",
			"0b00110101001101100011011100111000",
			"0b00111001001110000011011100110110",
			"0b00110110001101110011100000111001",
			"0b00111010001110010011100000110111",
			"0b00110111001110000011100100111010",
			"0b00111011001110100011100100111000",
			"0b00111000001110010011101000111011",
			"0b00111100001110110011101000111001",
			"0b00111001001110100011101100111100",
			"0b00111101001111000011101100111010",
			"0b00111010001110110011110000111101",
			"0b00111110001111010011110000111011",
			"0b00111011001111000011110100111110",
			"0b00111111001111100011110100111100",
			"0b00111100001111010011111000111111",
			"0b01000000001111110011111000111101",
			"0b00111101001111100011111101000000",
			"0b01000001010000000011111100111110",
			"0b00111110001111110100000001000001",
			"0b01000010010000010100000000111111",
			"0b00111111010000000100000101000010",
			"0b01000011010000100100000101000000",
			"0b01000000010000010100001001000011",
			"0b01000100010000110100001001000001",
			"0b01000001010000100100001101000100",
			"0b01000101010001000100001101000010",
			"0b01000010010000110100010001000101",
			"0b01000110010001010100010001000011",
			"0b01000011010001000100010101000110",
			"0b01000111010001100100010101000100",
			"0b01000100010001010100011001000111",
			"0b01001000010001110100011001000101",
			"0b01000101010001100100011101001000",
			"0b01001001010010000100011101000110",
			"0b01000110010001110100100001001001",
			"0b01001010010010010100100001000111",
			"0b01000111010010000100100101001010",
			"0b01001011010010100100100101001000",
			"0b01001000010010010100101001001011",
			"0b01001100010010110100101001001001",
			"0b01001001010010100100101101001100",
			"0b01001101010011000100101101001010",
			"0b01001010010010110100110001001101",
			"0b01001110010011010100110001001011",
			"0b01001011010011000100110101001110",
			"0b01001111010011100100110101001100",
			"0b01001100010011010100111001001111",
			"0b01010000010011110100111001001101",
			"0b01001101010011100100111101010000",
			"0b01010001010100000100111101001110",
			"0b01001110010011110101000001010001",
			"0b01010010010100010101000001001111",
			"0b01001111010100000101000101010010",
			"0b01010011010100100101000101010000",
			"0b01010000010100010101001001010011",
			"0b01010100010100110101001001010001",
			"0b01010001010100100101001101010100",
			"0b01010101010101000101001101010010",
			"0b01010010010100110101010001010101",
			"0b01010110010101010101010001010011",
			"0b01010011010101000101010101010110",
			"0b01010111010101100101010101010100",
			"0b01010100010101010101011001010111",
			"0b01011000010101110101011001010101",
			"0b01010101010101100101011101011000",
			"0b01011001010110000101011101010110",
			"0b01010110010101110101100001011001",
			"0b01011010010110010101100001010111",
			"0b01010111010110000101100101011010",
			"0b01011011010110100101100101011000",
			"0b01011000010110010101101001011011",
			"0b01011100010110110101101001011001",
			"0b01011001010110100101101101011100",
			"0b01011101010111000101101101011010",
			"0b01011010010110110101110001011101",
			"0b01011110010111010101110001011011",
			"0b01011011010111000101110101011110",
			"0b01011111010111100101110101011100",
			"0b01011100010111010101111001011111",
			"0b01100000010111110101111001011101",
			"0b01011101010111100101111101100000",
			"0b01100001011000000101111101011110",
			"0b01011110010111110110000001100001",
			"0b01100010011000010110000001011111",
			"0b01011111011000000110000101100010",
			"0b01100011011000100110000101100000",
			"0b01100000011000010110001001100011",
			"0b01100100011000110110001001100001",
			"0b01100001011000100110001101100100",
			"0b01100101011001000110001101100010",
			"0b01100010011000110110010001100101",
			"0b01100110011001010110010001100011",
			"0b01100011011001000110010101100110",
			"0b01100111011001100110010101100100",
			"0b01100100011001010110011001100111",
			"0b01101000011001110110011001100101",
			"0b01100101011001100110011101101000",
			"0b01101001011010000110011101100110",
			"0b01100110011001110110100001101001",
			"0b01101010011010010110100001100111",
			"0b01100111011010000110100101101010",
			"0b01101011011010100110100101101000",
			"0b01101000011010010110101001101011",
			"0b01101100011010110110101001101001",
			"0b01101001011010100110101101101100",
			"0b01101101011011000110101101101010",
			"0b01101010011010110110110001101101",
			"0b01101110011011010110110001101011",
			"0b01101011011011000110110101101110",
			"0b01101111011011100110110101101100",
			"0b01101100011011010110111001101111",
			"0b01110000011011110110111001101101",
			"0b01101101011011100110111101110000",
			"0b01110001011100000110111101101110",
			"0b01101110011011110111000001110001",
			"0b01110010011100010111000001101111",
			"0b01101111011100000111000101110010",
			"0b01110011011100100111000101110000",
			"0b01110000011100010111001001110011",
			"0b01110100011100110111001001110001",
			"0b01110001011100100111001101110100",
			"0b01110101011101000111001101110010",
			"0b01110010011100110111010001110101",
			"0b01110110011101010111010001110011",
			"0b01110011011101000111010101110110",
			"0b01110111011101100111010101110100",
			"0b01110100011101010111011001110111",
			"0b01111000011101110111011001110101",
			"0b01110101011101100111011101111000",
			"0b01111001011110000111011101110110",
			"0b01110110011101110111100001111001",
			"0b01111010011110010111100001110111",
			"0b01110111011110000111100101111010",
			"0b01111011011110100111100101111000",
			"0b01111000011110010111101001111011",
			"0b01111100011110110111101001111001",
			"0b01111001011110100111101101111100",
			"0b01111101011111000111101101111010",
			"0b01111010011110110111110001111101",
			"0b01111110011111010111110001111011",
			"0b01111011011111000111110101111110",
			"0b01111111011111100111110101111100",
			"0b01111100011111010111111001111111",
			"0b10000000011111110111111001111101",
			"0b01111101011111100111111110000000",
			"0b10000001100000000111111101111110",
			"0b01111110011111111000000010000001",
			"0b10000010100000011000000001111111",
			"0b01111111100000001000000110000010",
			"0b10000011100000101000000110000000",
			"0b10000000100000011000001010000011",
			"0b10000100100000111000001010000001",
			"0b10000001100000101000001110000100",
			"0b10000101100001001000001110000010",
			"0b10000010100000111000010010000101",
			"0b10000110100001011000010010000011",
			"0b10000011100001001000010110000110",
			"0b10000111100001101000010110000100",
			"0b10000100100001011000011010000111",
			"0b10001000100001111000011010000101",
			"0b10000101100001101000011110001000",
			"0b10001001100010001000011110000110",
			"0b10000110100001111000100010001001",
			"0b10001010100010011000100010000111",
			"0b10000111100010001000100110001010",
			"0b10001011100010101000100110001000",
			"0b10001000100010011000101010001011",
			"0b10001100100010111000101010001001",
			"0b10001001100010101000101110001100",
			"0b10001101100011001000101110001010",
			"0b10001010100010111000110010001101",
			"0b10001110100011011000110010001011",
			"0b10001011100011001000110110001110",
			"0b10001111100011101000110110001100",
			"0b10001100100011011000111010001111",
			"0b10010000100011111000111010001101",
			"0b10001101100011101000111110010000",
			"0b10010001100100001000111110001110",
			"0b10001110100011111001000010010001",
			"0b10010010100100011001000010001111",
			"0b10001111100100001001000110010010",
			"0b10010011100100101001000110010000",
			"0b10010000100100011001001010010011",
			"0b10010100100100111001001010010001",
			"0b10010001100100101001001110010100",
			"0b10010101100101001001001110010010",
			"0b10010010100100111001010010010101",
			"0b10010110100101011001010010010011",
			"0b10010011100101001001010110010110",
			"0b10010111100101101001010110010100",
			"0b10010100100101011001011010010111",
			"0b10011000100101111001011010010101",
			"0b10010101100101101001011110011000",
			"0b10011001100110001001011110010110",
			"0b10010110100101111001100010011001",
			"0b10011010100110011001100010010111",
			"0b10010111100110001001100110011010",
			"0b10011011100110101001100110011000",
			"0b10011000100110011001101010011011",
			"0b10011100100110111001101010011001",
			"0b10011001100110101001101110011100",
			"0b10011101100111001001101110011010",
			"0b10011010100110111001110010011101",
			"0b10011110100111011001110010011011",
			"0b10011011100111001001110110011110",
			"0b10011111100111101001110110011100",
			"0b10011100100111011001111010011111",
			"0b10100000100111111001111010011101",
			"0b10011101100111101001111110100000",
			"0b10100001101000001001111110011110",
			"0b10011110100111111010000010100001",
			"0b10100010101000011010000010011111",
			"0b10011111101000001010000110100010",
			"0b10100011101000101010000110100000",
			"0b10100000101000011010001010100011",
			"0b10100100101000111010001010100001",
			"0b10100001101000101010001110100100",
			"0b10100101101001001010001110100010",
			"0b10100010101000111010010010100101",
			"0b10100110101001011010010010100011",
			"0b10100011101001001010010110100110",
			"0b10100111101001101010010110100100",
			"0b10100100101001011010011010100111",
			"0b10101000101001111010011010100101",
			"0b10100101101001101010011110101000",
			"0b10101001101010001010011110100110",
			"0b10100110101001111010100010101001",
			"0b10101010101010011010100010100111",
			"0b10100111101010001010100110101010",
			"0b10101011101010101010100110101000",
			"0b10101000101010011010101010101011",
			"0b10101100101010111010101010101001",
			"0b10101001101010101010101110101100",
			"0b10101101101011001010101110101010",
			"0b10101010101010111010110010101101",
			"0b10101110101011011010110010101011",
			"0b10101011101011001010110110101110",
			"0b10101111101011101010110110101100",
			"0b10101100101011011010111010101111",
			"0b10110000101011111010111010101101",
			"0b10101101101011101010111110110000",
			"0b10110001101100001010111110101110",
			"0b10101110101011111011000010110001",
			"0b10110010101100011011000010101111",
			"0b10101111101100001011000110110010",
			"0b10110011101100101011000110110000",
			"0b10110000101100011011001010110011",
			"0b10110100101100111011001010110001",
			"0b10110001101100101011001110110100",
			"0b10110101101101001011001110110010",
			"0b10110010101100111011010010110101",
			"0b10110110101101011011010010110011",
			"0b10110011101101001011010110110110",
			"0b10110111101101101011010110110100",
			"0b10110100101101011011011010110111",
			"0b10111000101101111011011010110101",
			"0b10110101101101101011011110111000",
			"0b10111001101110001011011110110110",
			"0b10110110101101111011100010111001",
			"0b10111010101110011011100010110111",
			"0b10110111101110001011100110111010",
			"0b10111011101110101011100110111000",
			"0b10111000101110011011101010111011",
			"0b10111100101110111011101010111001",
			"0b10111001101110101011101110111100",
			"0b10111101101111001011101110111010",
			"0b10111010101110111011110010111101",
			"0b10111110101111011011110010111011",
			"0b10111011101111001011110110111110",
			"0b10111111101111101011110110111100",
			"0b10111100101111011011111010111111",
			"0b11000000101111111011111010111101",
			"0b10111101101111101011111111000000",
			"0b11000001110000001011111110111110",
			"0b10111110101111111100000011000001",
			"0b11000010110000011100000010111111",
			"0b10111111110000001100000111000010",
			"0b11000011110000101100000111000000",
			"0b11000000110000011100001011000011",
			"0b11000100110000111100001011000001",
			"0b11000001110000101100001111000100",
			"0b11000101110001001100001111000010",
			"0b11000010110000111100010011000101",
			"0b11000110110001011100010011000011",
			"0b11000011110001001100010111000110",
			"0b11000111110001101100010111000100",
			"0b11000100110001011100011011000111",
			"0b11001000110001111100011011000101",
			"0b11000101110001101100011111001000",
			"0b11001001110010001100011111000110",
			"0b11000110110001111100100011001001",
			"0b11001010110010011100100011000111",
			"0b11000111110010001100100111001010",
			"0b11001011110010101100100111001000",
			"0b11001000110010011100101011001011",
			"0b11001100110010111100101011001001",
			"0b11001001110010101100101111001100",
			"0b11001101110011001100101111001010",
			"0b11001010110010111100110011001101",
			"0b11001110110011011100110011001011",
			"0b11001011110011001100110111001110",
			"0b11001111110011101100110111001100",
			"0b11001100110011011100111011001111",
			"0b11010000110011111100111011001101",
			"0b11001101110011101100111111010000",
			"0b11010001110100001100111111001110",
			"0b11001110110011111101000011010001",
			"0b11010010110100011101000011001111",
			"0b11001111110100001101000111010010",
			"0b11010011110100101101000111010000",
			"0b11010000110100011101001011010011",
			"0b11010100110100111101001011010001",
			"0b11010001110100101101001111010100",
			"0b11010101110101001101001111010010",
			"0b11010010110100111101010011010101",
			"0b11010110110101011101010011010011",
			"0b11010011110101001101010111010110",
			"0b11010111110101101101010111010100",
			"0b11010100110101011101011011010111",
			"0b11011000110101111101011011010101",
			"0b11010101110101101101011111011000",
			"0b11011001110110001101011111010110",
			"0b11010110110101111101100011011001",
			"0b11011010110110011101100011010111",
			"0b11010111110110001101100111011010",
			"0b11011011110110101101100111011000",
			"0b11011000110110011101101011011011",
			"0b11011100110110111101101011011001",
			"0b11011001110110101101101111011100",
			"0b11011101110111001101101111011010",
			"0b11011010110110111101110011011101",
			"0b11011110110111011101110011011011",
			"0b11011011110111001101110111011110",
			"0b11011111110111101101110111011100",
			"0b11011100110111011101111011011111",
			"0b11100000110111111101111011011101",
			"0b11011101110111101101111111100000",
			"0b11100001111000001101111111011110",
			"0b11011110110111111110000011100001",
			"0b11100010111000011110000011011111",
			"0b11011111111000001110000111100010",
			"0b11100011111000101110000111100000",
			"0b11100000111000011110001011100011",
			"0b11100100111000111110001011100001",
			"0b11100001111000101110001111100100",
			"0b11100101111001001110001111100010",
			"0b11100010111000111110010011100101",
			"0b11100110111001011110010011100011",
			"0b11100011111001001110010111100110",
			"0b11100111111001101110010111100100",
			"0b11100100111001011110011011100111",
			"0b11101000111001111110011011100101",
			"0b11100101111001101110011111101000",
			"0b11101001111010001110011111100110",
			"0b11100110111001111110100011101001",
			"0b11101010111010011110100011100111",
			"0b11100111111010001110100111101010",
			"0b11101011111010101110100111101000",
			"0b11101000111010011110101011101011",
			"0b11101100111010111110101011101001",
			"0b11101001111010101110101111101100",
			"0b11101101111011001110101111101010",
			"0b11101010111010111110110011101101",
			"0b11101110111011011110110011101011",
			"0b11101011111011001110110111101110",
			"0b11101111111011101110110111101100",
			"0b11101100111011011110111011101111",
			"0b11110000111011111110111011101101",
			"0b11101101111011101110111111110000",
			"0b11110001111100001110111111101110",
			"0b11101110111011111111000011110001",
			"0b11110010111100011111000011101111",
			"0b11101111111100001111000111110010",
			"0b11110011111100101111000111110000",
			"0b11110000111100011111001011110011",
			"0b11110100111100111111001011110001",
			"0b11110001111100101111001111110100",
			"0b11110101111101001111001111110010",
			"0b11110010111100111111010011110101",
			"0b11110110111101011111010011110011",
			"0b11110011111101001111010111110110",
			"0b11110111111101101111010111110100",
			"0b11110100111101011111011011110111",
			"0b11111000111101111111011011110101",
			"0b11110101111101101111011111111000",
			"0b11111001111110001111011111110110",
			"0b11110110111101111111100011111001",
			"0b11111010111110011111100011110111",
			"0b11110111111110001111100111111010",
			"0b11111011111110101111100111111000",
			"0b11111000111110011111101011111011",
			"0b11111100111110111111101011111001",
			"0b11111001111110101111101111111100",
			"0b11111101111111001111101111111010",
			"0b11111010111110111111110011111101",
			"0b11111110111111011111110011111011",
			"0b11111011111111001111110111111110",
			"0b11111111111111101111110111111100",
			"0b11111100111111011111111011111111"
	};

	/**
	 * Sets the up before class.
	 *
	 * @throws Exception the exception
	 */
	@BeforeAll
	static void setUpBeforeClass() throws Exception {
	}

	/**
	 * Tear down after class.
	 *
	 * @throws Exception the exception
	 */
	@AfterAll
	static void tearDownAfterClass() throws Exception {
	}

	/**
	 * Sets the up.
	 *
	 * @throws Exception the exception
	 */
	@BeforeEach
	void setUp() throws Exception {
	}

	/**
	 * Tear down.
	 *
	 * @throws Exception the exception
	 */
	@AfterEach
	void tearDown() throws Exception {
	}

	/**
	 * Test basic parseByte functionality.
	 */
	@Test
	@Order(1)
	//@Disabled
	void test_BasicParseByte() {
		System.out.println("BasicParseByte Test:");
		System.out.print("   Demonstrate converting each digit: ");
		assertEquals(0,IntegerConvert.parseByte("0"));
		assertEquals(1,IntegerConvert.parseByte("1"));
		assertEquals(2,IntegerConvert.parseByte("2"));
		assertEquals(3,IntegerConvert.parseByte("3"));
		assertEquals(4,IntegerConvert.parseByte("4"));
		assertEquals(5,IntegerConvert.parseByte("5"));
		assertEquals(6,IntegerConvert.parseByte("6"));
		assertEquals(7,IntegerConvert.parseByte("7"));
		assertEquals(8,IntegerConvert.parseByte("8"));
		assertEquals(9,IntegerConvert.parseByte("9"));
		System.out.println("PASSED");
		
		System.out.print("   Convert all possible byte values: ");
		for (int i = 0; i < 256; i++) {
			int data = -128+i;
			assertEquals(data,IntegerConvert.parseByte(""+data));
		}
		System.out.println("PASSED");
		System.out.print("   Convert Max byte value (127): ");

		// check Max Value
		assertEquals(127,IntegerConvert.parseByte("127"));
		System.out.println("PASSED");
		System.out.print("   Convert zeroes test (single/multiple): ");
        // check 0
		assertEquals(0,IntegerConvert.parseByte("0"));
		assertEquals(0,IntegerConvert.parseByte("00000000"));
		System.out.println("PASSED");
		System.out.print("   Convert negative numbers: ");
		
	
		// test negative number
		assertEquals(-1,IntegerConvert.parseByte("-1"));
		assertEquals(-128,IntegerConvert.parseByte("-128"));
		assertEquals(0,IntegerConvert.parseByte("-0"));
		System.out.println("PASSED");
		System.out.print("   Convert explicit positive numbers: ");
		
		// test explict positive number
		assertEquals(1,IntegerConvert.parseByte("+1"));
		assertEquals(127,IntegerConvert.parseByte("+127"));
		assertEquals(0,IntegerConvert.parseByte("+0"));
		System.out.println("PASSED");
		System.out.print("   Test underscore removal: ");
		
		// test underscore removal...
		// test negative number
		assertEquals(127,IntegerConvert.parseByte("12__7______"));
		assertEquals(127,IntegerConvert.parseByte("1_2_7_"));
		assertEquals(-1,IntegerConvert.parseByte("-_1"));
		assertEquals(-128,IntegerConvert.parseByte("-_12_8"));
		System.out.println("PASSED");
	}

	/**
	 * Test basic parse int.
	 */
	@Test
	@Order(2)
	//@Disabled
	void test_BasicParseInt() {
		System.out.println("BasicParseInt Test:");
		System.out.print("   Demonstrate converting each digit: ");
		assertEquals(0,IntegerConvert.parseInt("0"));
		assertEquals(1,IntegerConvert.parseInt("1"));
		assertEquals(2,IntegerConvert.parseInt("2"));
		assertEquals(3,IntegerConvert.parseInt("3"));
		assertEquals(4,IntegerConvert.parseInt("4"));
		assertEquals(5,IntegerConvert.parseInt("5"));
		assertEquals(6,IntegerConvert.parseInt("6"));
		assertEquals(7,IntegerConvert.parseInt("7"));
		assertEquals(8,IntegerConvert.parseInt("8"));
		assertEquals(9,IntegerConvert.parseInt("9"));
		
		// format assertEquals(expectValue, actualValue)
		assertEquals(1234567890,IntegerConvert.parseInt("1234567890"));
		assertEquals(987654321,IntegerConvert.parseInt("0987654321"));
		System.out.println("PASSED");
		
		System.out.print("   Volume convert test: ");
		for (int i = 0; i < 998; i++) {
			int data = 1000000000+i*1000000+(i+1)*1000+(i+2);
			//System.out.println("i="+i+"    data="+data);
			assertEquals(data,IntegerConvert.parseInt(""+data));
		}
		System.out.println("PASSED");
		System.out.print("   Convert Max byte value (2147483647): ");
		// check Max Value
		assertEquals(2147483647,IntegerConvert.parseInt("2147483647"));
		System.out.println("PASSED");
		System.out.print("   Convert zeroes test (single/multiple): ");
        // check 0
		assertEquals(0,IntegerConvert.parseInt("0"));
		assertEquals(0,IntegerConvert.parseInt("00000000"));
		System.out.println("PASSED");
		System.out.print("   Convert negative numbers: ");
	
		// test negative number
		assertEquals(-1,IntegerConvert.parseInt("-1"));
		assertEquals(-2147483648,IntegerConvert.parseInt("-2147483648"));
		assertEquals(0,IntegerConvert.parseInt("-0"));		
		System.out.println("PASSED");
		
		System.out.print("   Convert explicit positive numbers: ");
		// test explict positive number
		assertEquals(1,IntegerConvert.parseInt("+1"));
		assertEquals(2147483647,IntegerConvert.parseInt("+2147483647"));
		assertEquals(0,IntegerConvert.parseInt("+0"));
		System.out.println("PASSED");
		System.out.print("   Test underscore removal: ");
		
		// test underscore removal...
		// test negative number
		assertEquals(2147483647,IntegerConvert.parseInt("2_147__483___647"));
		assertEquals(2147483647,IntegerConvert.parseInt("2_1_4_7_4_8_3_6_4_7___"));
		assertEquals(-1,IntegerConvert.parseInt("-_1"));
		assertEquals(-2147483648,IntegerConvert.parseInt("-_214_748_364_8"));
		System.out.println("PASSED");
	}

	/**
	 * Test basic bin str to byte.
	 */
	@Test
	@Order(3)
	void test_BasicBinStrToByte() {
		System.out.println("BasicParseBinStrToByte Test:");

		System.out.print("   Testing all 256 binary string conversions: ");
		int ptr = 0;
		for (int i = 0; i < 256; i++) {
			int data = -128+i;
			assertEquals(data,IntegerConvert.parseBinStrToByte(binToByteData[ptr]));
			ptr++;
		}
		System.out.println("PASSED");
		
		System.out.print("Testing underscore removal: ");

		assertEquals(-86,IntegerConvert.parseBinStrToByte("0b_10_10_10_10_"));
		assertEquals(-86,IntegerConvert.parseBinStrToByte("0b1_0__1___0____1_____0______1_______0_"));

		System.out.println("PASSED");
	}
		
	/**
	 * Test basic bin str to int.
	 */
	@Test
	@Order(4)
	void test_BasicBinStrToInt() {
		System.out.println("BasicParseBinStrToInt Test:");
		System.out.print("   Testing conversion of Max, -1, min binary strings: ");
		assertEquals( 2147483647,IntegerConvert.parseBinStrToInt("0b0111_1111_1111_1111_1111_1111_1111_1111"));
		assertEquals(         -1,IntegerConvert.parseBinStrToInt("0b1111_1111_1111_1111_1111_1111_1111_1111"));
		assertEquals(-2147483648,IntegerConvert.parseBinStrToInt("0b1000_0000_0000_0000_0000_0000_0000_0000"));
		System.out.println("PASSED");
		System.out.print("   Volume binary string conversion: ");
		int ptr = 0;
		for (int i = 0; i < 253; i++) {
			int data = ((i+3)<<24)+((i+2)<<16)+((i+1)<<8)+i;
			assertEquals(data,IntegerConvert.parseBinStrToInt(binToIntData[ptr]));
			ptr++;
			data = ((i)<<24)+((i+1)<<16)+((i+2)<<8)+i+3;
			assertEquals(data,IntegerConvert.parseBinStrToInt(binToIntData[ptr]));
			ptr++;
		}
		System.out.println("PASSED");
		System.out.print("   Testing underscore removal: ");
		assertEquals(170,IntegerConvert.parseBinStrToInt("0b_10_10_10_10_"));
		assertEquals(170,IntegerConvert.parseBinStrToInt("0b1_0__1___0____1_____0______1_______0_"));

		System.out.println("PASSED");
	}
	
}
